🚀 1. Mảng là gì?
Mảng là một cấu trúc dữ liệu giúp lưu trữ nhiều phần tử cùng kiểu dữ liệu trong một vùng nhớ liên tục.
Ưu điểm: Truy xuất nhanh theo chỉ số (O(1))
Nhược điểm: Kích thước cố định, khó mở rộng.

-----------------------------------------------------------------------------------------------------------------

🔹 2. Khai báo mảng
🟢 Java:
// Khai báo và khởi tạo mảng số nguyên
int[] numbers = new int[5]; 
int[] arr = {1, 2, 3, 4, 5};
🔵 C#:
// Khai báo và khởi tạo mảng số nguyên
int[] numbers = new int[5];
int[] arr = {1, 2, 3, 4, 5};
📌 Lưu ý:

Chỉ mục (index) bắt đầu từ 0.
Khi khởi tạo new int[5], mảng chứa giá trị mặc định (0 với số, null với đối tượng).

-----------------------------------------------------------------------------------------------------------------

🔹 3. Duyệt mảng (Iterating over an array)
🟢 Java:
for (int i = 0; i < arr.length; i++) {
    System.out.print(arr[i] + " ");
}

// Dùng foreach
for (int num : arr) {
    System.out.print(num + " ");
}
🔵 C#:
for (int i = 0; i < arr.Length; i++) {
    Console.Write(arr[i] + " ");
}

// Dùng foreach
foreach (int num in arr) {
    Console.Write(num + " ");
}

-----------------------------------------------------------------------------------------------------------------

🔹 4. Các thao tác cơ bản
Thao tác			Java						C#
Lấy độ dài			arr.length					arr.Length
Sắp xếp				Arrays.sort(arr);				Array.Sort(arr);
Tìm kiếm			Arrays.binarySearch(arr, x);			Array.IndexOf(arr, x);
Copy mảng			Arrays.copyOf(arr, newSize);			Array.Copy(arr, newArr, length);
Đảo ngược			Collections.reverse(Arrays.asList(arr));	Array.Reverse(arr);

-----------------------------------------------------------------------------------------------------------------

🔥 5. Mảng nhiều chiều
🟢 Java:
int[][] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

System.out.println(matrix[1][2]); // Output: 6
🔵 C#:
int[,] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

Console.WriteLine(matrix[1,2]); // Output: 6
📌 Lưu ý:

Java: Mảng nhiều chiều là mảng của mảng.
C#: Dùng [,] để khai báo mảng nhiều chiều.

-----------------------------------------------------------------------------------------------------------------

🔹 6. Các thuật toán liên quan đến mảng
🔥 Tìm phần tử lớn nhất & nhỏ nhất
🟢 Java:
int max = Arrays.stream(arr).max().getAsInt();
int min = Arrays.stream(arr).min().getAsInt();
🔵 C#:
int max = arr.Max();
int min = arr.Min();

🔥 Tìm phần tử xuất hiện nhiều nhất
🟢 Java:
Map<Integer, Integer> freq = new HashMap<>();
for (int num : arr) {
    freq.put(num, freq.getOrDefault(num, 0) + 1);
}
int mostFrequent = Collections.max(freq.entrySet(), Map.Entry.comparingByValue()).getKey();

Entry là 1 phần tử của map
🔵 C#:
var freq = arr.GroupBy(x => x).OrderByDescending(g => g.Count()).First().Key;
Trong Java, Collectors.groupingBy() trả về một Map<K, List<T>>. Trong C#, GroupBy() trả về một tập hợp IEnumerable<IGrouping<K, T>>

🔥 Filter
🟢 Java:
int[] newArr = Arrays.stream(arr).filter(x -> x != value).toArray();
🔵 C#:
int[] newArr = arr.Where(x => x != value).ToArray();

🏆 Một số thao tác khác với stream() của JAVA
🔹 1. Tính tổng
int sum = Arrays.stream(arr).sum();
System.out.println(sum); // Output: 20
🔹 2. Tìm số nhỏ nhất
int min = Arrays.stream(arr).min().getAsInt();
System.out.println(min); // Output: 1
🔹 3. Tính trung bình
double avg = Arrays.stream(arr).average().getAsDouble();
System.out.println(avg); // Output: 4.0
🔹 4. Lọc số chẵn
int[] evenNumbers = Arrays.stream(arr).filter(x -> x % 2 == 0).toArray();
System.out.println(Arrays.toString(evenNumbers)); // Output: [2]

==>> sum k cần getAsInt nhưng những thằng khác thì cần vì mảng rỗng thì sum vẫn trả về 0 còn những thằng khác trả về null. Vì vậy stream trả về OptionalInt, một wrapper giúp kiểm tra xem có giá trị hay không.
✅ Cách xử lý đúng
1️⃣ Kiểm tra isPresent() trước khi gọi getAsInt()
OptionalInt maxOptional = Arrays.stream(new int[]{}).max();
if (maxOptional.isPresent()) {
    System.out.println(maxOptional.getAsInt());
} else {
    System.out.println("Mảng rỗng, không có giá trị max!");
}
-----------------------------------------------------------------------------------------------------------------

🚀 7. Mảng động (ArrayList & List)
Do mảng có kích thước cố định, ta dùng ArrayList (Java) và List<T> (C#) để mở rộng.

🟢 Java:
List<Integer> list = new ArrayList<>();
list.add(1);
list.add(2);
System.out.println(list.get(0)); // Output: 1
🔵 C#:
List<int> list = new List<int>();
list.Add(1);
list.Add(2);
Console.WriteLine(list[0]); // Output: 1
💡 8. Một số bài toán nâng cao về mảng
1️⃣ Tìm phần tử duy nhất (không lặp lại) 2️⃣ Tìm cặp số có tổng bằng k 3️⃣ Sắp xếp mảng không dùng thư viện 4️⃣ Tìm mảng con có tổng lớn nhất (Kadane’s Algorithm) 5️⃣ Tìm phần tử bị thiếu trong dãy 1-N