1. Sắp xếp chọn (Selection Sort)
Ý tưởng: Tìm phần tử nhỏ nhất trong mảng, hoán đổi với phần tử đầu tiên, rồi lặp lại cho phần còn lại.
Độ phức tạp: O(n²)
Ưu điểm: Dễ hiểu, không cần bộ nhớ phụ.
Nhược điểm: Chậm đối với mảng lớn.
    public static void selectionSort(int[] arr) {
        int n = arr.length;
        
        // Duyệt qua mảng
        for (int i = 0; i < n - 1; i++) {
            // Tìm phần tử nhỏ nhất trong mảng chưa sắp xếp
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            
            // Hoán đổi phần tử nhỏ nhất với phần tử ở vị trí i
            if (minIndex != i) {
                int temp = arr[i];
                arr[i] = arr[minIndex];
                arr[minIndex] = temp;
            }
        }
    }

2. Sắp xếp nổi bọt (Bubble Sort)
Ý tưởng: Duyệt qua mảng, so sánh hai phần tử liên tiếp và hoán đổi nếu cần. Lặp lại cho đến khi mảng đã được sắp xếp.
Độ phức tạp: O(n²)
Ưu điểm: Dễ hiểu, dễ cài đặt.
Nhược điểm: Chậm, hiệu suất kém khi mảng lớn.
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        
        // Duyệt qua mảng nhiều lần
        for (int i = 0; i < n - 1; i++) {
            // Biến kiểm tra xem có hoán đổi xảy ra trong lần duyệt này không
            boolean swapped = false;
            
            // Duyệt qua phần mảng chưa được sắp xếp
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Hoán đổi nếu phần tử hiện tại lớn hơn phần tử tiếp theo
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }
            
            // Nếu không có hoán đổi nào trong vòng lặp này, mảng đã được sắp xếp
            if (!swapped) {
                break;
            }
        }
    }


Có thể dùng while thay cho for bên ngoài

3. Sắp xếp chèn (Insertion Sort)
Ý tưởng: Xem mỗi phần tử như một "thẻ bài", chèn nó vào vị trí phù hợp trong phần đã sắp xếp.
Độ phức tạp: O(n²) trong trường hợp xấu nhất, O(n) khi mảng đã sắp xếp.
Ưu điểm: Hiệu quả khi mảng gần như đã được sắp xếp.
Nhược điểm: Không hiệu quả với mảng lớn.

4. Sắp xếp nhanh (Quick Sort)
Ý tưởng: Chọn một phần tử làm "pivot", phân tách mảng thành hai phần (phần nhỏ hơn và lớn hơn pivot), rồi đệ quy sắp xếp từng phần.
Độ phức tạp: O(n log n) trung bình, O(n²) trong trường hợp xấu.
Ưu điểm: Rất nhanh với mảng lớn.
Nhược điểm: Hiệu suất tệ khi pivot chọn không tốt.
    // Hàm phân chia mảng
    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];  // Chọn phần tử cuối cùng làm pivot
        int i = low - 1;  // Chỉ số cho phần tử nhỏ hơn pivot
        
        // Duyệt qua mảng và di chuyển các phần tử nhỏ hơn pivot sang bên trái
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                // Hoán đổi arr[i] và arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        
        // Hoán đổi pivot với arr[i + 1] để đưa pivot vào vị trí chính xác
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        
        return i + 1;  // Trả về chỉ số của pivot
    }
    
    // Hàm QuickSort
    private static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Tìm chỉ số pivot sau khi phân chia mảng
            int pi = partition(arr, low, high);
            
            // Đệ quy QuickSort cho phần bên trái và bên phải pivot
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

5. Sắp xếp trộn (Merge Sort)
Ý tưởng: Chia mảng thành hai nửa, đệ quy sắp xếp chúng, sau đó hợp nhất lại (merge).
Độ phức tạp: O(n log n)
Ưu điểm: Tối ưu và ổn định.
Nhược điểm: Cần bộ nhớ phụ O(n).

6. Sắp xếp Heap (Heap Sort)
Ý tưởng: Xây dựng một cây heap, sau đó lấy phần tử lớn nhất/nhỏ nhất ra và giảm kích thước heap.
Độ phức tạp: O(n log n)
Ưu điểm: Không cần bộ nhớ phụ ngoài dữ liệu đã cho.
Nhược điểm: Cài đặt phức tạp hơn so với Quick hoặc Merge Sort.

7. Sắp xếp đếm (Counting Sort)
Ý tưởng: Đếm số lần xuất hiện của các phần tử trong mảng, sau đó sử dụng thông tin này để sắp xếp.
Độ phức tạp: O(n + k), với k là phạm vi giá trị của phần tử.
Ưu điểm: Rất nhanh với các dãy số có phạm vi nhỏ.
Nhược điểm: Không hiệu quả nếu phạm vi giá trị quá lớn.

8. Sắp xếp theo cơ số (Radix Sort)
Ý tưởng: Sắp xếp theo từng chữ số (hoặc bit), từ ít quan trọng đến quan trọng.
Độ phức tạp: O(nk), với k là số chữ số tối đa của phần tử.
Ưu điểm: Nhanh khi k nhỏ và dữ liệu có phạm vi giới hạn.
Nhược điểm: Cần bộ nhớ phụ và chỉ áp dụng với dữ liệu có cấu trúc rõ ràng.

9. Sắp xếp thùng (Bucket Sort)
Ý tưởng: Chia dữ liệu thành các "thùng", sau đó sắp xếp từng thùng rồi kết hợp lại.
Độ phức tạp: O(n + k) trong trường hợp lý tưởng, với k là số thùng.
Ưu điểm: Tốt với phân phối dữ liệu đồng đều.
Nhược điểm: Không hiệu quả với phân phối dữ liệu không đều.

