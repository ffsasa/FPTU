1Ô∏è‚É£ Ch·ªçn ch·ªß ƒë·ªÅ ƒë·ªÉ h·ªçc theo th·ª© t·ª± h·ª£p l√Ω
‚úÖ C∆° b·∫£n:

Arrays & Hashing
Two Pointers
Stack / Queue
Sliding Window
Binary Search
Recursion & Backtracking
‚úÖ Trung c·∫•p:

Linked List
Trees & Graphs
Heap (Priority Queue)
Trie
Dynamic Programming
‚úÖ N√¢ng cao:

Advanced Graph (Dijkstra, Floyd-Warshall, Bellman-Ford)
Segment Tree / Fenwick Tree
Bit Manipulation
Math & Geometry
B·∫°n c√≥ th·ªÉ tham kh·∫£o l·ªô tr√¨nh t·ª´ NeetCode 150 ƒë·ªÉ l√†m theo th·ª© t·ª± n√†y: https://neetcode.io/roadmap

2Ô∏è‚É£ H·ªçc l√Ω thuy·∫øt tr∆∞·ªõc khi l√†m b√†i t·∫≠p

3Ô∏è‚É£ Luy·ªán t·∫≠p b√†i t·∫≠p tr√™n LeetCode theo t·ª´ng ch·ªß ƒë·ªÅ
üìå C√°ch ch·ªçn b√†i ƒë·ªÉ l√†m:

L√†m 3-5 b√†i Easy ƒë·ªÉ hi·ªÉu r√µ ki·∫øn th·ª©c c∆° b·∫£n
L√†m 5-10 b√†i Medium ƒë·ªÉ √°p d·ª•ng
N·∫øu c·∫£m th·∫•y quen r·ªìi, th·ª≠ l√†m 1-3 b√†i Hard
üìå B·ªô b√†i t·∫≠p quan tr·ªçng:

Blind 75: 75 b√†i quan tr·ªçng nh·∫•t cho ph·ªèng v·∫•n
NeetCode 150: L·ªô tr√¨nh t·ªët nh·∫•t theo ch·ªß ƒë·ªÅ
LeetCode Top Interview Questions: B·ªô b√†i t·∫≠p m√† c√°c c√¥ng ty hay h·ªèi nh·∫•t


üî• 4. M·ªôt s·ªë k·ªπ thu·∫≠t v√† thu·∫≠t to√°n quan tr·ªçng
‚úî Sorting Algorithms (Thu·∫≠t to√°n s·∫Øp x·∫øp)

Bubble Sort, Selection Sort, Insertion Sort (O(n¬≤))
Merge Sort, Quick Sort, Heap Sort (O(n log n))
Counting Sort, Radix Sort, Bucket Sort (O(n))
‚úî Greedy Algorithms (Thu·∫≠t to√°n tham lam)

Huffman Encoding
Kruskal‚Äôs Algorithm (Minimum Spanning Tree)
Prim‚Äôs Algorithm
‚úî Divide & Conquer (Chia ƒë·ªÉ tr·ªã)

Merge Sort, Quick Sort
Binary Search
Closest Pair of Points
‚úî Topological Sorting (S·∫Øp x·∫øp topo ‚Äì DAG)

Kahn's Algorithm
DFS-Based Topological Sort
‚úî Disjoint Set (Union-Find, DSU)

Path Compression
Union by Rank
·ª®ng d·ª•ng: Kruskal's Algorithm, Detect Cycle in Graph
‚úî String Algorithms (X·ª≠ l√Ω chu·ªói)

KMP Algorithm
Rabin-Karp Algorithm
Z-Algorithm
Suffix Array & Suffix Tree
‚úî Number Theory (L√Ω thuy·∫øt s·ªë - Math)

GCD, LCM (Euclidean Algorithm)
Sieve of Eratosthenes (T√¨m s·ªë nguy√™n t·ªë)
Modular Exponentiation
Chinese Remainder Theorem
‚úî Game Theory (L√Ω thuy·∫øt tr√≤ ch∆°i - Cho AI, Thu·∫≠t to√°n ch∆°i game)

Minimax Algorithm
Alpha-Beta Pruning

T·ªïng h·ª£p n·ªïi ti·∫øng:https://leetcode.com/discuss/general-discussion/460599/blind-75-leetcode-question

üéØ T√≥m l·∫°i, khi gi·∫£i xong 1 b√†i LeetCode, h√£y ki·ªÉm tra:
1Ô∏è‚É£ Test Cases: ƒê√£ pass 100% ch∆∞a? C√≥ fail case n√†o c·∫ßn s·ª≠a kh√¥ng?
2Ô∏è‚É£ Runtime: B√†i c·ªßa b·∫°n nhanh h∆°n bao nhi√™u % ng∆∞·ªùi kh√°c? C√≥ th·ªÉ t·ªëi ∆∞u h∆°n kh√¥ng?
3Ô∏è‚É£ Memory Usage: C√≥ d√πng qu√° nhi·ªÅu b·ªô nh·ªõ kh√¥ng? C√≥ bi·∫øn t·∫°m n√†o c√≥ th·ªÉ b·ªè ƒëi kh√¥ng?
4Ô∏è‚É£ Big-O Complexity: Code c·ªßa b·∫°n c√≥ th·ªÉ gi·∫£m ƒë·ªô ph·ª©c t·∫°p kh√¥ng?
5Ô∏è‚É£ Tham kh·∫£o l·ªùi gi·∫£i kh√°c: C√≥ c√°ch vi·∫øt ng·∫Øn h∆°n ho·∫∑c t·ªëi ∆∞u h∆°n kh√¥ng?