Bước 1: Tạo bảng RefreshToken
Id	      GUID / BIGINT AUTO_INCREMENT	Khóa chính, định danh duy nhất cho mỗi token.
UserId	      GUID / BIGINT	                ID của user sở hữu token này (liên kết với bảng Users).
Token	      VARCHAR(255)	                Giá trị của refresh token (có thể mã hóa để bảo mật).
ExpiresAt     DATETIME	                        Ngày & giờ hết hạn của refresh token.
Revoked	      BIT				Kiểm tra refresh token đã được sử dụng hay chưa

=> Nhớ khóa ngoại user và index userId

Bước 2: GenerateRefreshToken
    public static string GenerateRefreshToken()
    {
        var randomNumber = new byte[32]; // Tạo một mảng byte có độ dài 32
        using (var rng = RandomNumberGenerator.Create()) 
        {
            rng.GetBytes(randomNumber); // Sinh số ngẫu nhiên an toàn
        }
        return Convert.ToBase64String(randomNumber); // Chuyển thành chuỗi Base64
    }



Bước 3: Thêm refreshToken vào response trả về của phần login, khi login không chỉ trả về token mà còn trả về refreshToken

public async Task<BaseResponse> Authenticate(AuthenticateRequest request)
{
    Expression<Func<Account, bool>> searchFilter = p =>
          p.UserName.Equals(request.Username) &&
          p.Password.Equals(PasswordUtil.HashPassword(request.Password)) &&
          (p.Role == RoleEnum.Customer.GetDescriptionFromEnum()||
          p.Role == RoleEnum.Listener.GetDescriptionFromEnum());
    Account account = await _unitOfWork.GetRepository<Account>().SingleOrDefaultAsync(predicate: searchFilter);
    if (account == null)
    {
        return new BaseResponse()
        {
            status = StatusCodes.Status400BadRequest.ToString(),
            message = "Tài khoản hoặc mật khẩu không đúng",
            data = null
        };
    }

    RoleEnum role = EnumUtil.ParseEnum<RoleEnum>(account.Role);
    Tuple<string, Guid> guildClaim = new Tuple<string, Guid>("accountId", account.Id);
    var token = JwtUtil.GenerateJwtToken(account, guildClaim);

    var refreshToken = new RefreshToken()						============> Ở đây
    {
        Id = Guid.NewGuid(),
        UserId = account.Id,
        RefreshToken1 = JwtUtil.GenerateRefreshToken(),
        ExpirationTime = DateTime.Now.AddDays(30)
    };

    await _unitOfWork.GetRepository<RefreshToken>().InsertAsync(refreshToken);

    // Create the login response object
    var authenticateResponse = new AuthenticateResponse()
    {
        RoleEnum = role.ToString(),
        AccountId = account.Id,
        UserName = account.UserName,
        token = token, // Assign the generated token
        RefreshToken = refreshToken						============> Ở đây
    };

    bool isSuccessfully = await _unitOfWork.CommitAsync() > 0;						============> Ở đây

    if (isSuccessfully)
    {
        // Return a success response
        return new BaseResponse
        {
            status = StatusCodes.Status200OK.ToString(),
            message = "Login successful.",
            data = authenticateResponse
        };
    }

    return new BaseResponse()
    {
        status = StatusCodes.Status400BadRequest.ToString(),
        message = "Login failed",
        data = null
    };
}



Bước 4: Viết loginWithRefreshToken bên service:
public async Task<BaseResponse> AutheticateWithRefreshToken(string refreshTokenRequest)
{
    RefreshToken? refreshToken = await _unitOfWork.GetRepository<RefreshToken>().SingleOrDefaultAsync(
        predicate: r => r.Token == refreshTokenRequest,
        include: r => r.Include(r => r.User)
        );

    if (refreshToken == null || refreshToken.ExpirationTime < DateTime.UtcNow)
    {
        return new BaseResponse()
        {
            status = StatusCodes.Status400BadRequest.ToString(),
            message = "The refresh token has expired",
            data = null
        };
    }

    refreshToken.Token = JwtUtil.GenerateRefreshToken();
    refreshToken.ExpirationTime = DateTime.Now.AddDays(30);

    _unitOfWork.GetRepository<RefreshToken>().UpdateAsync(refreshToken);

    bool isSuccessfully = await _unitOfWork.CommitAsync() > 0;

    if (!isSuccessfully)
    {
        // Return a success response
        return new BaseResponse()
        {
            status = StatusCodes.Status400BadRequest.ToString(),
            message = "Login failed",
            data = null
        };
    }

    RoleEnum role = EnumUtil.ParseEnum<RoleEnum>(refreshToken.User.Role);
    Tuple<string, Guid> guildClaim = new Tuple<string, Guid>("accountId", refreshToken.User.Id);
    var token = JwtUtil.GenerateJwtToken(refreshToken.User, guildClaim);

    // Create the login response object
    var authenticateResponse = new AuthenticateResponse()
    {
        RoleEnum = role.ToString(),
        AccountId = refreshToken.User.Id,
        UserName = refreshToken.User.UserName,
        token = token, // Assign the generated token
        RefreshToken = refreshToken.Token
    };
      
    return new BaseResponse
    {
        status = StatusCodes.Status200OK.ToString(),
        message = "Login successful.",
        data = authenticateResponse
    };           
}



Bước 5: Cuối cùng là controller
[HttpPost(ApiEndPointConstant.Authentication.AutheticateWithRefreshToken)]
[ProducesResponseType(typeof(BaseResponse), StatusCodes.Status200OK)]
[ProducesResponseType(typeof(BaseResponse), StatusCodes.Status400BadRequest)]
[ProducesErrorResponseType(typeof(ProblemDetails))]
public async Task<IActionResult> AutheticateWithRefreshToken([FromBody] string request)
{
    var response = await _authService.AutheticateWithRefreshToken(request);
    return StatusCode(int.Parse(response.status), response);
}






