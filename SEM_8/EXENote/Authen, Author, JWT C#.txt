📌 Bước 1: Cài đặt các package cần thiết
Trước tiên, mở terminal hoặc Package Manager Console và chạy lệnh sau để cài đặt các thư viện cần thiết:

```powershell
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
dotnet add package Swashbuckle.AspNetCore
```
✅ Tác dụng: 
- `Microsoft.AspNetCore.Authentication.JwtBearer` ➝ Hỗ trợ xác thực JWT trong ASP.NET Core.  
- `Swashbuckle.AspNetCore` ➝ Tích hợp Swagger để test API.

---

📌 Bước 2: Cấu hình JWT trong `appsettings.json`
Mở file `appsettings.json` và thêm cấu hình JWT:

```json
{
  "JwtSettings": {
    "Secret": "your_super_secret_key_123456789", 
    "Issuer": "YourIssuer",
    "Audience": "YourAudience",
    "ExpireMinutes": 60
  }
}
```

✅ **Giải thích:**  
- `Secret` ➝ Khóa bí mật để ký token (**nên giữ bí mật**).  
- `Issuer` ➝ Định danh của server phát hành token.  
- `Audience` ➝ Đối tượng sử dụng token.  
- `ExpireMinutes` ➝ Thời gian token hết hạn.

---

📌 Bước 3: Tạo `JwtService` để sinh Token
Tạo thư mục `Services`, sau đó thêm file `JwtService.cs`:

```csharp
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

public class JwtService
{
    private readonly IConfiguration _configuration;

    public JwtService(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    public string GenerateToken(string username, string role)
    {
        var jwtSettings = _configuration.GetSection("JwtSettings");
        var key = Encoding.UTF8.GetBytes(jwtSettings["Secret"]);

        var tokenHandler = new JwtSecurityTokenHandler();
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[]
            {
                new Claim(ClaimTypes.Name, username),
                new Claim(ClaimTypes.Role, role)
            }),
            Expires = DateTime.UtcNow.AddMinutes(Convert.ToDouble(jwtSettings["ExpireMinutes"])),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature),
            Issuer = jwtSettings["Issuer"],
            Audience = jwtSettings["Audience"]
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }
}
```

✅ **Giải thích:**  
- **`GenerateToken`** ➝ Tạo JWT token chứa `username` & `role`.  
- **`Claims`** ➝ Lưu thông tin user vào token.  
- **`SigningCredentials`** ➝ Ký token với `HmacSha256`.  
- **`Expires`** ➝ Hạn sử dụng của token.  

---

# **📌 Bước 4: Cấu hình Authentication & Authorization trong `Program.cs`**
Mở `Program.cs` và thêm đoạn code sau:

```csharp
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Đọc cấu hình JWT từ appsettings.json
var jwtSettings = builder.Configuration.GetSection("JwtSettings");
var key = Encoding.UTF8.GetBytes(jwtSettings["Secret"]);

// Cấu hình Authentication với JWT
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(key),
        ValidateIssuer = true,
        ValidIssuer = jwtSettings["Issuer"],
        ValidateAudience = true,
        ValidAudience = jwtSettings["Audience"],
        ValidateLifetime = true,
        ClockSkew = TimeSpan.Zero
    };
});

// Cấu hình Authorization
builder.Services.AddAuthorization();

// Đăng ký JwtService
builder.Services.AddSingleton<JwtService>();

// Cấu hình Swagger có Authentication
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.AddSecurityDefinition("Bearer", new Microsoft.OpenApi.Models.OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = Microsoft.OpenApi.Models.SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = Microsoft.OpenApi.Models.ParameterLocation.Header,
        Description = "Nhập 'Bearer {token}' vào ô bên dưới"
    });

    options.AddSecurityRequirement(new Microsoft.OpenApi.Models.OpenApiSecurityRequirement
    {
        {
            new Microsoft.OpenApi.Models.OpenApiSecurityScheme
            {
                Reference = new Microsoft.OpenApi.Models.OpenApiReference
                {
                    Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

var app = builder.Build();

app.UseSwagger();
app.UseSwaggerUI();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
```

✅ Giải thích:
- **Cấu hình JWT Authentication** trong ASP.NET Core.  
- **Đăng ký `JwtService`** để sử dụng trong Controller.  
- **Tích hợp Swagger Security** để nhập Token.  

---

📌 Bước 5: Tạo API đăng nhập để sinh JWT
Tạo file `AuthController.cs` trong thư mục `Controllers`:

```csharp
using Microsoft.AspNetCore.Mvc;

[Route("api/auth")]
[ApiController]
public class AuthController : ControllerBase
{
    private readonly JwtService _jwtService;

    public AuthController(JwtService jwtService)
    {
        _jwtService = jwtService;
    }

    [HttpPost("login")]
    public IActionResult Login([FromBody] LoginRequest request)
    {
        if (request.Username != "admin" || request.Password != "password")
            return Unauthorized("Invalid username or password");

        var token = _jwtService.GenerateToken(request.Username, "Admin");
        return Ok(new { Token = token });
    }
}

public class LoginRequest
{
    public string Username { get; set; }
    public string Password { get; set; }
}
```

✅ **Giải thích:**  
- Nhận `username/password`, kiểm tra hợp lệ rồi sinh JWT token.  

---

# **📌 Bước 6: Áp dụng Authorization vào Controller**
Tạo file `SecureController.cs`:

```csharp
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Route("api/secure")]
[ApiController]
public class SecureController : ControllerBase
{
    [Authorize]
    [HttpGet("protected")]
    public IActionResult GetProtectedData()
    {
        return Ok(new { Message = "This is a protected resource" });
    }

    [Authorize(Roles = "Admin")]
    [HttpGet("admin")]
    public IActionResult GetAdminData()
    {
        return Ok(new { Message = "This is an Admin-only resource" });
    }
}
```

✅ **Giải thích:**  
- **`[Authorize]`** ➝ Chặn truy cập nếu không có token.  
- **`[Authorize(Roles = "Admin")]`** ➝ Chỉ `Admin` mới truy cập được.  

---
---

# **🎯 Kết luận**
✅ **Thiết lập JWT Authentication & Authorization**  
✅ **Bảo vệ API bằng `[Authorize]`**  
✅ **Tích hợp Swagger để test API**  

🚀 **Hệ thống bảo mật hoàn chỉnh!**


==================================================
                       *************MỞ RỘNG**************

1. HmacSha256 
- Trong code trên có thể thấy có phần 

SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)

- Tức là ký token bằng HmacSha256. Phần này cần phải hiểu các mà token đã được tạo ra:

- Đầu tiền token được tạo ra có 3 phần chính: Header.Payload.Signature và được gửi đi trong những request về server.

Phần Header chứa thông tin: 
{
  "alg": "HS256", => Kiểu mã hóa
  "typ": "JWT" => Đây là JWT Token
}
Cần chuyển thông tin của Header thành token => Base64Url encode mã hóa không bảo mật.


Phần Payload chứa thông tin các claims được chúng ta thêm vào:
{
  "sub": "1234567890",
  "name": "John Doe",
  "role": "Admin",
  "exp": 1693697200
}
Cần chuyển thông tin của Payload thành token => Base64Url encode mã hóa không bảo mật.

==> Dựa vào công thức Header.Payload.Signature ta đã có 2 phần của token được mã hóa nên hiện tại token sẽ có dạng: ey(v.v..)CJ9.eyJz(v.v..)AwfQ đó là (Header mã hóa) + . + (Payload mã hóa)

- Cuối cùng chúng ta cần tạo ra phần cuối của token là Signature bằng công thức: HMACSHA256( Base64(Header) + "." + Base64(Payload), SecretKey )

=> Cuối cùng ghép 3 mảnh lại ngăn cách bằng dấu . thì ra được token cuối cùng. Header và Payload mã hóa không bảo mật nên cần Signature được mã hóa bằng HmacSha256 bảo mật.

==> KẾT QUẢ: Khi nhận được token thì sẽ chuyển header và payload từ base64url về lại thông tin ban đầu. Tiếp theo kiểm tra Signature bằng cách đơn giản là dựa vào Header, Payload được gửi tới từ request và SecretKey trong hệ thống tạo ra lại 1 Signature thứ 2 để so sánh với Signature được gửi tới từ request nếu trùng nhau tức là phần SecretKey là trùng nhau từ đó chứng minh được đó chính là 1 token hợp lệ.
