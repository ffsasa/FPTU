1️⃣ Middleware là gì?
Middleware là các thành phần trung gian xử lý request trước khi chúng đến Controller và sau khi nhận được response từ Controller.

🛠 Chức năng chính của Middleware:

Xác thực & Ủy quyền (Authentication & Authorization)
Ghi log, đo thời gian xử lý request
Xử lý lỗi (Exception Handling)
CORS (Cross-Origin Resource Sharing)
Compression (Gzip, Brotli)
Tạo cache, response header, redirect,...
📌 Chuỗi Middleware hoạt động như sau:

Client ---> Middleware 1 ---> Middleware 2 ---> Middleware 3 ---> Controller
Client <--- Middleware 1 <--- Middleware 2 <--- Middleware 3 <--- Response
👉 Mỗi Middleware có thể:

Chuyển tiếp request đến Middleware tiếp theo (await _next(context))
Chặn request (ví dụ: Unauthorized, BadRequest)
Chỉnh sửa request hoặc response
2️⃣ Cách Viết Middleware Đơn Giản
Có 3 cách để viết Middleware:
✅ Sử dụng delegate (cách đơn giản nhất)
✅ Tạo class Middleware
✅ Dùng extension method cho Middleware

📌 2.1 Middleware đơn giản bằng delegate
Dùng app.Use() để tạo Middleware ngay trong Program.cs.

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.Use(async (context, next) =>
{
    Console.WriteLine($"Request: {context.Request.Method} {context.Request.Path}");
    await next(); // Chuyển tiếp request đến Middleware tiếp theo
    Console.WriteLine($"Response: {context.Response.StatusCode}");
});

app.MapGet("/", () => "Hello, Middleware!");
app.Run();
👉 Khi có request đến, Middleware này sẽ log ra console trước và sau khi Controller xử lý.

📌 2.2 Viết Middleware bằng class
Khi Middleware phức tạp hơn, bạn nên tạo một class riêng để dễ quản lý.

Bước 1: Tạo Middleware
public class LoggingMiddleware
{
    private readonly RequestDelegate _next;

    public LoggingMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        Console.WriteLine($"[LoggingMiddleware] Request: {context.Request.Method} {context.Request.Path}");
        
        await _next(context); // Chuyển request đến Middleware tiếp theo
        
        Console.WriteLine($"[LoggingMiddleware] Response: {context.Response.StatusCode}");
    }
}
Bước 2: Đăng ký Middleware trong Program.cs
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.UseMiddleware<LoggingMiddleware>(); // Thêm Middleware

app.MapGet("/", () => "Hello, Middleware!");
app.Run();
👉 Khi chạy, mỗi request đến server sẽ được Middleware này log lại.

📌 2.3 Tạo Middleware bằng Extension Method
Cách này giúp Middleware dễ sử dụng hơn mà không cần gọi UseMiddleware<T>() trực tiếp.

Bước 1: Viết Middleware như bình thường
public class LoggingMiddleware
{
    private readonly RequestDelegate _next;

    public LoggingMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        Console.WriteLine($"[LoggingMiddleware] Request: {context.Request.Method} {context.Request.Path}");
        await _next(context);
        Console.WriteLine($"[LoggingMiddleware] Response: {context.Response.StatusCode}");
    }
}
Bước 2: Tạo Extension Method
public static class MiddlewareExtensions
{
    public static IApplicationBuilder UseLoggingMiddleware(this IApplicationBuilder app)
    {
        return app.UseMiddleware<LoggingMiddleware>();
    }
}
Bước 3: Đăng ký trong Program.cs
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.UseLoggingMiddleware(); // Dùng extension method

app.MapGet("/", () => "Hello, Middleware!");
app.Run();
👉 Dễ đọc hơn, dễ tái sử dụng hơn trong dự án lớn.

3️⃣ Middleware Trong Dự Án Thực Tế
Trong các dự án thực tế, họ KHÔNG viết mới Middleware hoàn toàn, mà:

Tái sử dụng Middleware có sẵn từ ASP.NET Core (UseAuthorization, UseCors, UseExceptionHandler, UseAuthentication, v.v.).
Tạo Middleware riêng nếu cần (ví dụ: Logging, Rate Limiting, Custom Error Handling).
Tinh chỉnh Middleware cũ thay vì viết lại từ đầu.
📌 Ví dụ về Middleware thực tế:

1. Middleware kiểm tra Authentication
public class AuthenticationMiddleware
{
    private readonly RequestDelegate _next;

    public AuthenticationMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        var user = context.User;
        if (user.Identity is { IsAuthenticated: false })
        {
            context.Response.StatusCode = 401;
            await context.Response.WriteAsync("Bạn chưa đăng nhập!");
            return;
        }

        await _next(context);
    }
}
📌 Sử dụng trong Program.cs:

app.UseMiddleware<AuthenticationMiddleware>();
2. Middleware xử lý lỗi toàn cục
public class ExceptionHandlingMiddleware
{
    private readonly RequestDelegate _next;

    public ExceptionHandlingMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        try
        {
            await _next(context);
        }
        catch (Exception ex)
        {
            context.Response.StatusCode = 500;
            await context.Response.WriteAsync($"Lỗi hệ thống: {ex.Message}");
        }
    }
}
📌 Đăng ký trong Program.cs:

app.UseMiddleware<ExceptionHandlingMiddleware>();
4️⃣ Tóm Tắt
Cách viết Middleware					Khi nào dùng
Dùng delegate (app.Use())				Middleware đơn giản, ít tái sử dụng
Dùng class Middleware (UseMiddleware<T>())		Middleware phức tạp, cần dễ bảo trì
Dùng Extension Method (UseLoggingMiddleware())		Middleware cần tái sử dụng nhiều nơi
📌 Trong dự án thực tế, họ thường tái sử dụng Middleware cũ rồi tinh chỉnh thay vì viết lại từ đầu.
📌 Middleware rất quan trọng trong ASP.NET Core vì nó giúp tách biệt logic xử lý request khỏi Controller.

