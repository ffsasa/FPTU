Ôn bài sau tết

1. CLASS/OBJECT
- Class là cái khuôn -> dùng để dúc ra những object
- Class là tên gọi chung cho nhóm những object chia sẻ nhiều đặc điểm chung, object là những thứ cụ thể thuộc về 1 nhóm/class nào đó

- CÓ NHỮNG CLASS "ĐẶC BIỆT" 1 CHÚT - OBJECT TỪ NÓ SẼ ĐƯỢC LƯU TRỮ LÂU DÀI TRÊN Ổ ĐĨA - TA MUỐN CẤT THÔNG TIN.

Class Student
{
   public string Id {get; set;}
   public string Name {get; set;}	
}

object:
Student s = new Student(...);
Student s = new Student(...) {...};

row/record
insert into Student values(...)
insert into Student values(...)

Relation: Student(id, name, yob) -> mai mốt thành table: cột và dòng
p/m cho phép ta lưu trữ data trong table, lưu trữ các relation -> RDBMS:Relational Database Mgt System

Relationship: Mỗi quan hệ: Student ------- Major
			   Student ------- Subject
			         relationship
			   relation	   relation

STUDENT SẼ ĐƯỢC MAPP XUỐNG TABLE -> DO ĐÓ NÓ ĐẶC BIỆT, TA ĐỂ NÓ Ở THƯ MỤC ENTITY/ENTITIES

CÒN NHỮNG CLASS KHÁC NỮA NHƯNG KHÔNG CHƠI VỚI DATABASE

2.QUẢN LÍ NHIỀU OBJECT NHƯ THẾ NÀO?
- Khi ta có new Student() new Student() new Student(),... sẽ đặt/để những new Student() này ở đâu trong RAM

- Ta cần 1 cái hộp/ 1 cái túi/ 1 cái giỏ,... nơi có nhiều không gian để nhét các object khác vòa bên trong.
	=> Class cabinet xuất hiện
	=> Mỗi lần mua cabinet - new Cabinent() sẽ có 1 không gian để nhét sđồ vào

- Cabinet sẽ được sử dụng để đựng nhiều đồ
 	+ Mở ra, thêm đồ 
	+ Mở ra, loại bỏ 1 món
	+ Mở ra, sắp xếp lại
	+ Mở ra, nhìn 1 lượt
- Nhóm hành động CRUD

{
   Student s1;
   Student s2;
   Student s3;
   Student s4, s5, s6, s7,....; -> Khai báo lẻ từng biến
}

// Chơi mảng tiện lợi hơn
Student[] arr = new Student[300];
=> Giống ở trên nhưng tiện hơn và nhanh hơn. Nhưng dư nhiều chỗ quá, không biết thêm vào đâu.
=> Tạo thêm biến count biết vị trí cần thêm vào
=> Vậy class cabinet để ở đâu? Vì nó liên quan đến xử lý data nên ta đặt nó trong thư mục service.

3. LÀM APP LỚP, CHIA ĐỂ TRỊ - DIVIDE & CONQUER
- 1 app sẽ được làm ra để giải quyết nhu cầu của người dùng: nhu cầu quản lí ks, nhà hàng,...
- 1 app chính là 1 solution cho khách hàng - 1 solution có nhiều code, nhiều class!

school manager solution -> app quản lí trường
lmht solution -> game lmht

---------------------------------------------

CẤU TRÚC 1 BÀI THI
Project 1 ------ |MainUI: tương tác người dùng, render là UI với người dùng 
		 |code 1 đống console project -> CUI - Character User Interface .exe .dll main() Run em đi. 
		 |Windown form - GUI - chuột, màu sắc, nút nhấn, ô nhập .exe .dll Run em đi

Project 2 ------ |Repository: Liên quan lưu trữ data - database
		 |Class library project .dll không có main() vì nó là thư viện

Project 3 ------ |Service: Liên quan đến xử lý nhiều data
		 |Class library project .dll không có main() vì nó là thư viện
		 |Cabinet class chứa bên trong 1 mảng các object
		 |Thằng này cần Repository để thao tác. Sau khi thao tác nó trả về cho MainUI

-> Project 3 dependecy Project 2. Project 1 dependecy Project 3 nhưng thằng 3 dependecy thằng 2, nên thằng 1 cx có thể sử dụng thằng 2.

===========================================

4. Kĩ thuật One Size fit all

List<Student>
List<Lecture>
List<Cat>
-> List chứa rất nhiều object bên trong

=> Tạo 1 cabinet chơi với mọi class khác muốn cất trữ bên trong.
void F(<T> t)

F(<String> t)
F(<int> t)
F(<float> t)
- Biến tham số truyền vào là 1 DataType chứ k còn là 1 giá trị cụ thể