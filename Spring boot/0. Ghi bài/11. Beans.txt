I. Phạm vi sử dụng của Bean - Bean Scope
- Bean Scope xác định phạm vi hoạt động, phạm vi sống của 1 Bean. Được quản lý bởi Spring IoC container.
- Bean Scope quyết định 1 bean được tạo ra như thế nào, lưu trữ và những ai được sử dụng trong ứng dụng.

1. Singleton
- Đây là phạm vi mặc đinh nếu chúng ta không cấu hình.
- Bean được tạo 1 lần duy nhất trong lần đầu tiên được gọi, sau đó được lưu trữ và sử dụng trong các lần khác.

2. Prototype
- Khi 1 bean được cấu hình/định nghĩa là prototype, thì khi yêu cầu container sẽ tạo ra 1 phiên bản Bean mới để cung cấp.
- Tức là bean này sẽ không được lưu trữ và chia sẻ giữa các request.
- TỨc là Bean này sẽ được tạo khi gọi đến nó, nên không cần khai báo Lazy nó vẫn là Lazy.

3. Request
- Chỉ áp dụng cho các ứng dụng web.
- Mỗi khi nhận 1 request HTTP mới, thì container sẽ tạo ra 1 phiên bản Bean mới chỉ phục vụ cho request đó. Kết thúc request, Bean bị hủy.

4. Session
- Giống với request, với mỗi session sẽ có 1 Bean duy nhất, tức là trong session đó gọi bao nhiêu request sử dụng 1 loại Bean thì chỉ sinh ra loại Bean đó 1 lần.

5. Global Session
- Tương tự session tuy nhiên nó chỉ áp dụng trong các môi trường phân tán, ví dụ: Spring Portlet MVC. Sẽ được giải thích sau.

6. Application
- Phạm vi này giống singleton nhưng khác ở chỗ chỉ sử dụng cho ứng dụng web

7. WebSocket - Đây là 1 thằng đặc biệt
- Với mỗi liên kết websocket được sinh ra sẽ có 1 phiên bản duy nhất của bean, khi kết nối kết thúc, bean bị hủy.
- Ví dụ: nhấp vào 1 button sinh ra 1 cửa sổ => Sinh là 1 liên kết websocket.

II. Cách sử dụng @Scope
- Giống với @Primary và @Lazy, chúng ta cấu hình @Component/Bean bằng cách thêm @Scope ở bên dưới @Component

- Sytax: @Scope(ConfigurableBeanFactory.SCOPE_<Scopetype>)

- Ví dụ: 
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)

III.Vòng đời của Bean

Container Started -> Bean Instantiated -> Dependencies Injected -> Custom init() method -> Custom utility method -> Custom destroy() method.

- Chúng ta tập trung vào các bước có thể custom được: Custom init() method và Custom destroy() method. Sau khi được tạo ra nó sẽ làm gì và trước khi bị hủy bỏ nó sẽ làm gì.

1. Annotation: @PostConstruct
- Đặt trước 1 method trong một bean để chỉ định rằng phương thức đó sẽ được thực hiện ngay sau khi Bean đó được tạo.
- Phương thức này vì là tự động nên không có tham số và không có giá trị trả về. Thường được sử dụng để khởi tạo cái gì đó kèm theo.

2. Annotation: @PreDestroy
- Đặt trước 1 method trong một bean để chỉ định rằng phương thức đó sẽ được thực hiện ngay trước khi Bean đó bị hủy.
- Phương thức này vì là tự động nên không có tham số và không có giá trị trả về. Thường được sử dụng để giải phóng tài nguyên, dọn dẹp.
=> Nếu Bean có Scope là Prototype thì sẽ không gọi phương thức Destroy().





