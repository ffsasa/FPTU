I. Sơ đồ thự hiện của Spring Security:

- Client -> Authentication Filter <=> Authentication Manager <=> Aithentication Provider <=> UserDetails Service
                    |
                    v
             Security Context

B1: Ban đầu, yêu cầu từ người dùng sẽ chạm vào lớp đầu tiên là Authentication Filter (Bộ lọc xác thực), lớp mà chúng ta sẽ cấu hình.

B2: Sau đó, yêu cầu sẽ được chuyển tiếp qua Authentication Manager. Authentication Manager này sẽ cần sử dụng một hoặc nhiều Authentication Provider để thực hiện công việc xác thực.

B3: Thường thì sẽ có một Authentication Provider mặc định và chúng ta chỉ cần cấu hình để sử dụng nó thay vì phải tự tạo một Authentication Provider mới, vì việc này thực sự phức tạp.

B4: Lúc này, Authentication Provider sẽ sử dụng UserDetails Service để truy xuất thông tin người dùng từ cơ sở dữ liệu. Nói cách khác, Authentication Manager đang cố gắng xác thực người dùng thông qua Authentication Provider mặc định, và UserDetails Service cung cấp dữ liệu cần thiết.

B5: Nếu người dùng thực sự tồn tại, từ UserDetails Service, thông tin sẽ được trả lại Authentication Manager, và tại đây, quá trình xác thực người dùng sẽ được hoàn tất.

B6: Thông tin xác thực này sẽ được lưu trữ trong Security Context. Đây là lý do vì sao người dùng không cần đăng nhập lại sau đó, vì các thông tin xác thực đã được lưu trữ bên trong Security Context.
=============================================

II. SecurityFilterChain
- Đây là nơi bao gồm 1 chuỗi các bộ lọc, các yêu cầu HTTP sẽ phải thông qua các bộ lọc này mới làm việc tiếp được.

- Code: 

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(authorize -> authorize
                        .anyRequest().authenticated()
                )
                .httpBasic(Customizer.withDefaults());

        return http.build();
    }
}

- Nếu không thực hiện cấu hình csrf thì nó sẽ xảy ra 1 loạt lỗi rất khó chịu, vì vậy chúng ta 1 cách đơn giản để cấu hình là: csrf().disable()
- CSRF là 1 loại tấn công mạng xảy ra khi người dùng thực hiện đăng nhập vào 1 web A, sau đó truy cập vào 1 web B khác của kẻ tấn công. Lúc này web B sẽ liên tục gửi các HTTP Request về web A nhằm thay đổi thông tin,... từ đó làm hại người dùng. => csrf().disable() tắt cơ chế bảo vệ chống lại CSRF. Tuy nguy hiểm nhưng sẽ không cần cấu hình CSRF.
- Deprecated: là thuật ngữ được sử dụng trong lập trình và công nghệ để chỉ các thành phần (như phương thức, lớp, hoặc tính năng) vẫn có thể được sử dụng nhưng không còn được khuyến khích dùng vì đã có các giải pháp thay thế tốt hơn.

=============================================

III. UserDetails Service
- UserDetails Service là một hợp đồng cho phép chúng tôi kéo thông tin người dùng khỏi cơ sở dữ liệu. Giống như nó sẽ kéo 1 đối tượng người dùng ra khỏi cơ sở dữ liệu và trả lại họ ở dạng chi tiết người dùng.

- Nó chỉ đại diện cho lớp User trong Spring (Lớp chứa password, username)

- Người lập trình ra Spring Boot không có người dùng cụ thể nào, họ phải tạo ra implementationcụ thể của UserDetailsService để quản lý người dùng, và nó được gọi là InMemoryUserDetailsManager. Đây là 1 người dùng được tạo tự động, và nó rất basic

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(authorize -> authorize
                        .requestMatchers(HttpMethod.GET).permitAll()
                        .anyRequest().authenticated()
                )
                .httpBasic(Customizer.withDefaults());

        return http.build();
    }

//Tạo người dùng giả
    @Bean
    public UserDetailsService users(){
        UserDetails admin = User.builder()
                .username("admin")
                .password("password")
                .roles("ADMIN")
                .build();
        UserDetails user = User.builder()
                .username("user")
                .password("password")
                .roles("USER")
                .build();

        return new InMemoryUserDetailsManager(admin, user);
    }
}

===============================================

IV. User&Role và Authentication&Authorization

===============================================

V. Các bước thực hiện

B1: Cần 1 đối tượng User có username, password. Nó phải kế thừa UserDetail

B2: Tạo Repository của User vì Service cần Repository của JPA để lấy thông tin. Ở đây filter sẽ thay vì lấy UserName, Password rồi đi so sánh, thì filter sẽ tìm xem có người dùng nào trùng Username không, sau đó mới so sánh Password => Cần tạo method findByUsername, existsByUsername trong Repository User. Và findByName trong Repository Role.

==========

B3: Config UserDetailService gồm loadUserByUsername, và rolesToAuthorities. Nhưng với cách của Cường làm trong SWP thì nó viết tắt, thay vì viết vào 1 class mới 2 phương thức trên, nó đặt UserDetailService là 1 Bean và mỗi khi khởi tạo sẽ tự động trả về UserDetail đang hoạt động. Trong thử mục Security

@Bean
    public UserDetailsService userDetailsService(){
        return username -> accountRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    }

HOẶC

@Service
public class CustomUserDetailsService  implements UserDetailsService {

    private UserRepository userRepository;

    @Autowired
    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        UserEntity user = userRepository.findByUsername(username).orElseThrow(() -> new UsernameNotFoundException("Username not found"));
        return new User(user.getUsername(), user.getPassword(), mapRolesToAuthorities(user.getRoles()));
    }

    private Collection<GrantedAuthority> mapRolesToAuthorities(List<Role> roles) {
        return roles.stream().map(role -> new SimpleGrantedAuthority(role.getName())).collect(Collectors.toList());
    }
}

==========

B4: Đã còn fig xong UserDetailService cần đưa nó vào SecurityConfig của chúng ta. Đầu tiên cần tạo Bean AuthenticationManager trả về 1 AuthenticationManager được lấy ra từ AuthenticationConfiguration. Đây là tiền đề tạo AuthenticationProvider trong thử mục Security

private CustomUserDetailsService customUserDetailsService;

    @Autowired
    public SecurityConfig(CustomUserDetailsService customUserDetailsService) {
        this.customUserDetailsService = customUserDetailsService;
    }
VÀ

@Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

===========

B5: Tạo method PasswordEncoder để mã hóa mật khẩu, và cái này cũng cần cung cấp khi tạo AuthenticationProvider trong thử mục Security

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}


**  Chú ý: Spring Security cung cấp một DaoAuthenticationProvider mặc định nếu bạn đã cấu hình UserDetailsService và PasswordEncoder. Do đó, nếu bạn của bạn đã cấu hình đúng UserDetailsService và PasswordEncoder, Spring Security sẽ tự động sử dụng chúng. 
	=> Không cần viết thêm Authentication Provider

HOẶC 

Thêm phần dưới vào SecurityConfig
@Bean
    public AuthenticationProvider authenticationProvider(){
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService());
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

==========

B6: Tạo phương thức Register trong thư mục controller

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    private AuthenticationManager authenticationManager;
    private UserRepository userRepository;
    private RoleRepository roleRepository;
    private PasswordEncoder passwordEncoder;

    @Autowired
    public AuthController(AuthenticationManager authenticationManager, UserRepository userRepository,
                          RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
        this.authenticationManager = authenticationManager;
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @PostMapping("register")
    public ResponseEntity<String> register(@RequestBody RegisterDto registerDto) {
        if (userRepository.existsByUsername(registerDto.getUsername())) {
            return new ResponseEntity<>("Username is taken!", HttpStatus.BAD_REQUEST);
        }

        UserEntity user = new UserEntity();
        user.setUsername(registerDto.getUsername());
        user.setPassword(passwordEncoder.encode((registerDto.getPassword())));

        Role roles = roleRepository.findByName("USER").get();
        user.setRoles(Collections.singletonList(roles));

        userRepository.save(user);

        return new ResponseEntity<>("User registered success!", HttpStatus.OK);
    }
}

===========

B7: Thêm những API cần authenticated vào SecurityConfig

@Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(authorize -> authorize
                        .requestMatchers("/api/auth/**").permitAll()   *** những API bắt đầu là /api/auth/... thường là đăng ký và đăng nhập nên cho permitAll()
                        .anyRequest().authenticated()
                )
                .httpBasic(Customizer.withDefaults());

        return http.build();
    }

==============

B8: Tạo RegisterDto trong file dto và test trên Postman

@Data
public class RegisterDto {
    private String username;
    private String password;
}

=============

B10: Tạo LoginDto và API để Login

@Data
public class LoginDto {
    private String username;
    private String password;
}

VÀ

@PostMapping("login")
    public ResponseEntity<AuthResponseDTO> login(@RequestBody LoginDto loginDto){
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                loginDto.getUsername(),
                loginDto.getPassword()));
        SecurityContextHolder.getContext().setAuthentication(authentication);
        return new ResponseEntity<>("Username is taken!", HttpStatus.OK);
    }

**Nếu có lỗi hãy xóa phần tạo đối tượng giả ở phần III 

B9: Xem tiếp bài 22.JWT 
