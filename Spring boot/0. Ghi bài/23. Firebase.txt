I. Bắt đầu
Bước 1: Thêm dependency
<dependency>
			<groupId>com.google.firebase</groupId>
			<artifactId>firebase-admin</artifactId>
			<version>9.1.1</version>
		</dependency>

Bước 2: Lên firebase và tạo 1 kho lưu trữ (firebase project)

II. Chuẩn bị để kết nối
- Cần xác thức và ủy quyền cho spring boot cục bộ của mình kết nối với firebase và cũng kết nối với cơ sở dững liệu mà chúng ta tạo trên firebase.
- Ở phần này  tập trung vào việc thiết lập hoặc kết nối ứng dụng chúng ta đang code với firebase bằng cách sử dụng mẫu soạn sẵn, và cách mà firebase cung cấp cho chúng ta các screctkey

Bước 3: Lấy các khóa bảo mật hoặc 1 loạt các khóa khác trên firebase
- Tới phần project setting -> Service accounts -> Trong phần Firebase Admin SDK -> Chọn Generate new private key -> Down file key về để thêm vào dự án.

Bước 4: Vào dự án và tạo file serviceAccountKey.json trong phần resources. Sau đó đem thông tin trong file vừa down về bỏ vào serviceAccountKey.json

=> Sau 2 bước trên bây giờ cần uy quyền để khi chạy project nó sẽ tự động sử dụng file bên trên để kết nối firebase. CHÚNG TA SẼ LÀM NÓ SAU.

Bước 5: Tạo 1 storage bên trong project firebase chúng ta vừa tạo để lưu hình ảnh. Trong phần Project Overview của firebase project chúng ta tạo bên trên chọn vào Storage

Bước 6: Chọn Get started -> Next -> Done

Bước 7: Bắt đầu config để tích hợp firebase -> Tạo file FirebaseConfig

@Configuration
public class FirebaseConfig {

    @PostConstruct
    public void init() throws IOException {
        FileInputStream serviceAccount = new FileInputStream("src/main/resources/serviceAccountKey.json");

        FirebaseOptions options = new  FirebaseOptions.Builder()
                .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                .setStorageBucket("testfirebase-e5f0f.appspot.com") // Lấy trong Storage được tạo
                .build();
        if (FirebaseApp.getApps().isEmpty()) {
            FirebaseApp.initializeApp(options);
        }
    }
}

Bước 8: Đã cấu hình để sử dụng đến firebase được tạo trên web rồi chúng ta viết service để upload hình ảnh

@Service
public class FirebaseService {

    public String uploadImage(MultipartFile file) throws IOException {
        String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
        String bucketName = "testfirebase-e5f0f.appspot.com";

        Storage storage = StorageClient.getInstance().bucket().getStorage();

        BlobId blobId = BlobId.of(bucketName, fileName);
        BlobInfo blobInfo = BlobInfo.newBuilder(blobId).setContentType(file.getContentType()).build();

        // Tạo Blob và lưu trữ trong bucket
        Blob blob = storage.create(blobInfo, file.getBytes());

        // Tạo URL có chữ ký cho Blob
        String signedUrl = blob.signUrl(365, TimeUnit.DAYS).toString();

        return signedUrl;
    }
}

Bước 9: Viết serice của User gọi đến FirebaseService để upload hình ảnh của User
@Service
public class UserService implements IUserService {

    @Autowired
    FirebaseService firebaseService;

    @Autowired
    UserRepository userRepository;

    public UserEntity saveUserWithImage(MultipartFile file, String userName, String passWord) throws IOException {
        String imageUrl = firebaseService.uploadImage(file);

        UserEntity user = new UserEntity();
        user.setUsername(userName);
        user.setPassword(passWord);
        user.setImageUrl(imageUrl);

        return userRepository.save(user);
    }
}

Bước 10: Viết API
@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;
    @PostMapping("/upload")
    public ResponseEntity<UserEntity> uploadUserWithImage(
            @RequestParam("file") MultipartFile file,
            @RequestParam("name") String userName,
            @RequestParam("email") String passWord) throws IOException {
        UserEntity user = userService.saveUserWithImage(file, userName, passWord);
        return ResponseEntity.ok(user);
    }
}

