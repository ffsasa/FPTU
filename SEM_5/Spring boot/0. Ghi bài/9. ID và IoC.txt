I. IoC - Inversion of Control - Đảo ngược điều khiển
1. Khái niệm
Ví dụ: Chúng ta phải lái xe đi du lịch, thì chúng ta thuê 1 bên dịch vụ. Bàn giao cho bên đó quản lý, đảo ngược điều khiển.

- Ở java, khi ta cần 1 đối tượng hoặc 1 nội dung nào đó chúng ta cần sử dụng. Thì chúng ta phải xác định nó và new nó bằng constructor.
=> Giao việc tạo đối tượng(Bean) này cho container khác, bên này tọa cho chúng ta, chúng ta chỉ cần sử dụng. Đây chính là IoC.

- Và đây chỉ là 1 mô hình giống ORM - Khái niệm và hiện thực IoC cần có DI

II. Dependency Injection 
- ID là cách hiện thực hóa IoC bằng các Annotation, Java code.

- Thay vì một đối tượng tự tạo hoặc tự quản lý các phụ thuộc của nó, đối tượng được cung cấp các phụ thuộc từ bên ngoài thông qua các cơ chế như constructor, setter, qua gán trực tiếp vào các thuộc tính.

- Khi một đối tượng cần sử dụng 1 phụ thuộc, nó không tự tạo ra mà chấp nhận 1 đối tượng được cung cấp từ bên ngoài.

- Cách sử dụng: 
	+ Annotation: @Autowired cho đối tượng cần tiêm
	+ Annotation: @Component cho đối tượng sẽ tiêm vào trong

-------------------------------------------------

III. Các loại Dependency Injection
1. Constructor Injection
- Phụ thuộc được tiêm vào thông qua constructor của 1 lớp. Khởi tạo 1 đối tượng có phụ thuộc hoàn toàn và đảm bảo rằng đối tượng sẽ không bị thiếu phụ thuộc khi sử dụng. -> Sử dụng @Autowired bên trên constructor.
- Đòi hỏi tất cả thuộc tính, thông tin, phụ thuộc thì dùng cách này.

VÍ dụ: 
@Autowired
    public IndexController(EmailService email){
        this.email = email;
    }

- LUỒNG CHẠY CỦA CODE: 	
	+ Nó quét tới 1 API ví dụ: /send-email
	+ Phát hiện ra cần 1 Instance để gọi hàm của API này.
	+ Nó sẽ tạo ra 1 Instance của Class đó để gọi ra làm của API này.
	+ Từ đó nó sẽ chạy hàm constructor, và thực hiện Autowired. 
=> Thực hiện Autowired trong lúc chạy constructor

2. Setter Injection
- Tiêm phụ thuộc thông qua Setter Method
- Việc khởi tạo đối tượng và tiêm phụ thuộc diễn ra độc lập. 
-> Sử dụng @Autowired bên trên setter method hoặc trực tiếp bên trên thuộc tính. (ĐÂY LÀ CÁCH CƯỜNG DÙNG)

- LUỒNG CHẠY CỦA CODE:
	+ Ở đây hàm constructor sẽ chỉ tạo đối tượng để có thể sử dụng hàm mà API gọi tới
	+ Sau đó nó sẽ chạy Autowired để set giá trị cho thuộc tính
	+ Sau đó thuộc tính này sẽ được sử dụng trong hàm
=> Thực hiện constructor sau đó mới thực hiện Autowired.

---------------------------------------------------------

IV. Câu chuyện bên lề - Field Inject
- Spring không khuyến khích sử dụng cách này.
- Đây là cách Cường dùng. Tiêm trực tiếp vào lúc tạo thuộc tính.

Ví dụ:
@Autowired
private MessageInterface email;

- Khuyết điểm: luôn luôn tiềm vào, không kiểm soát. Khó khi test, dù k muốn tiêm, nhưng nó vẫn tiêm vào.