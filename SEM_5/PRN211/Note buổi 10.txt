------------- Delegate LÀ GÌ? -------------

#1.
Date type | value -> variable
          | value -> variable
          | value -> variable
          | value -> variable
          | value -> variable
          | value -> variable

#2.
int yob = 2003;
int currentYear = 2024;
Student s1 = new Student(...);
Student s2 = new Student(...);

I. Ngữ pháp tiếng việt - danh từ là gì?
1. Danh từ là gì?
- Danh từ là 1 từ, hay nhiều từ dùng để gọi tên 1 sự vật, hiện tượng, sự kiện quanh ta.
- Ví dụ: quốc gia, việt nam, biển/đại dương, thái bình dương, thủ đô, hà nội, bangkok,...

2. Danh từ chung là gì?
- Danh từ chung: Những từ diễn tả mô tả gọi tên chung cho rất nhiều sự vật hiện tượng, đại diện cho 1 nhóm sự vật hiện tượng.
- Ví dụ: quốc gia, đại dương, điện thoại, đồ uống, quần áo vật dụng, thủ đô, ca sĩ,...

3. Danh từ riêng là gì?
- Danh từ riêng: Là những từ diễn tả gọi tên 1 thứ cụ thể duy nhất nào đó. Tên gọi cho 1 thứ nào đó - đặt tên cho 1 vật cụ thể
- Ví dụ: Việt nam, lào, thái bình dương, đại tây dương, ngọc trinh, sài gòn,...

II. Data type | Value | Variable :dính đến danh từ chung, danh từ riêng, thứ gì đó
0. Thing, things, value, values
- Mói thứ quanh ta, bất kì cái gì quanh ta, ta nhìn thấy được, kể tên, nói về nó, thứ đó gọi là sự vật, hiện tượng, sự kiện.
- Mọi thư quanh ta được diễn tả qua 2 hình thức, 2 định dạng: Đơn giản và phức tạp, hầu hết là phức tạp

1. Thing - thứ quanh ta mà đơn giản - single value | simple value
- Định nghĩa: THứ mà hình dáng biểu diễn của nó đơn giản, không cần nhiều lời để nói về nó thường là những đại lượng, con số, trạng thái.
- Ví dụ: 1 3 5 10 8% 0.8 24.000.000 Đúng/Sai, Đậu/Rớt

2. Thing - thứ quanh ta mà phức tạp - complex value, composite value, object value [Struct, Structure value]
- Định nghĩa: {...} Phức tạp là được tạo thành từ nhiều thú đơn lẻ khác, quy ước dùng {} [] () để mô tả về thứ phức tạp. Còn gọi là Object
- Ví dụ: {Nguyễn Thanh Tùng, Sơn Tùng M-TP, 1994, Thái Bình, Chúng Ta Của Tương Lai}

3. Quanh ta có nhiều thứ đơn giản và phức tạp - kĩ thuật quản lí nhiều thứ quanh ta 
- Con người làm 2 việc: 
	+ Chia nhóm, phân loại
	+ Đặt tên

III. Phân nhóm và Đặt tên
1. Phân nhóm
- Định nghĩa: Dùng danh từ chung để đặt tên cho 1 nhóm các đồ vật, thứ quanh ta có chung nhiều thứ, đồng dạng với nhau, chung định dạng. Nhóm là các đặt tên cho 1 nhóm value.
=> Đó chính là data type

Ví dụ: 1 3 5 10 8% 0.8 24.000.000
=> Đều là con số, đại lượng đo lường, nhóm số, nhóm số thực, real, float, double, decimal

1 3 5 10 24.000.000     |     8% 0.8
-------------------           ------
Nguyên con                    Lẻ miếng
int, long, integer


{Nguyễn Thanh Tùng, Sơn Tùng M-TP, 1994, Thái Bình, Chúng Ta Của Tương Lai} => class, object, data type Singer.
===> Ngoài những data type nguyên bản được cung cấp, thì các class cũng là các data type chúng ta tự tạo ra.

2. Đặt tên
- Tên gọi tắt, nick name, cho mỗi đối tượng/value để dễ dàng tham chiếu đến nó. Nên gọi tắt này được gọi là variable 
- Ví dụ:
	Sếp = {Nguyễn Thanh Tùng, Sơn Tùng M-TP, 1994, Thái Bình, Chúng Ta Của Tương Lai}
	yob = 2002
	g = 9.8 ...

3. Công thức và mối liên hệ giữa bộ 3 huyền thoại Data Type | Value | Variable

- Datatype: Tên gọi chung, danh từ chung cho 1 đám value nào đó có cùng hình dạng. -> int, long, float, Student, Person,...

- Biến: Tên gọi riêng, danh từ riêng cho từng value cụ thể nào đó của datatype

- Datatype Biến = Value; Value này còn có tên gọi là <biến> thuộc về nhóm dữ liệu <datatype>

 
IV. DELEGATE - MIND SHIFT - dịch chuyển thay đổi tư duy
1. Generic
- Truyền thống:
	void F(int n)
	void F(Student s)
	void F(Lecturer l)
	-> Khi sử dụng: F(new Lecturer(){....})

- Hiện đại, mind shift:
	void F(<T> V)

-> Khi sử dụng:	F(<int> 5);
	F(<Student> new Student(){...});
	F(<Lecturer> new Lecturer(){...});
	 
==> Generic: Pass data type as argument/Parameter

2. 2ND MIND SHIFT
1. Mở đầu
- Delegate: Lần đầu tiên pass a method/function as argument/parameter hàm được xem là value để pass đi
- Truyền 1 hàm vào trong 1 hàm.

=> Function progaraming, dependency injection, linq (stream api bên java), lambda expression, anonymous function...

2. Chứng minh
- QUanh ta có 2 loại value đơn giản và phức tạp
- Tách riêng data phức tạp ra 1 chỗ

- Nhìn vào trong source code, ta thấy có rất nhiều thứ phức tạp, đó là 1 loạt các hàm mà ta đã viết (hàm có nhận input, thuật toán xử lí, output)
- Code ta có đám hàm, đám value như sau:

void SayHello(){....}	//in ra kq		TÊN:f1
void SayMessage(){....}	//in ra kq                  f2
void PrintString(){....}	//in ra kq          f3
=>NHÓM KHÔNG VÀO KHÔNG RA - DATA TYPE - X

void ComputerPower(int n){....}	//hàm mũ 2, in ra kq
void ComputerSquareRoot(int n){....}	//hàm tính căn bậc 2, in ra kq
=>NHÓM CÓ VÀO KHÔNG RA - DATA TYPE - Y

int ComputerPower(){....}	//hàm trả về kq
int ComputerSquareRoot(){....}	//hàm trả về kq
=>NHÓM KHÔNG VÀO CÓ RA - DATA TYPE - Z

int ComputerPower(int x){....}	//hàm tính bình phương trả về kq
int ComputerPowerV2(int y){....}	//hàm mũ 3 trả về kq
=>NHÓM CÓ VÀO CÓ RA - DATA TYPE - ZZZ

- Data type: X, Y, Z, ZZZ tương ứng với 4 loại hàm dựa trên đầu vào đầu ra
- Value: void SayHello(){....}
- Variable: f1

- Sử dụng:
	X    f1   =    hàm;
	
- Nhưng X nó quá tổng quát để đặt tên cho nhóm hàm KHÔNG VÀO KHÔNG RA, nên giang hồ đặt tên cho nó như sau:

=>>>>>>>> delegate void X(); => X là 1 data type cho nhóm hàm void và không có đầu vào. <<<<<<====
delegate void Y(int)

3. Ví dụ cụ thể

- Đối với hàm: void SayHello(){....}

delegate void X();
    X              f        =    void SayHello(){....};
(Datatype)    (Variable)              (Value)



============================================================

JSON - JavaScript Object Notation
       J   S      O      N
       Biểu diễn, mô tả 1 đối tượng, 1 thứ phức tạp bằng bộ kí hiệu {...}
       dùng trong ngôn ngữ JavaScript
{"Id" : "QE170035", "Name" : "Tạ Ngọc An", "Yob" : 2003, "Province" : "Gia Lai"}
Mô tả cho 1 con người cụ thể là Tạ Ngọc An với các info chi tiết