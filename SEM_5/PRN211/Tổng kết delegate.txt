V . Các công thức , các bước , công thức để chơi với delegate 
- Định nghĩa : delegate là 1 loại class đặc b dùng để lưu - bản chất mày là 1 data type như các loại data type khác int, long, double, person , student,...
- Delegate là loại class đặc biệt nó dùng để lưu info đực biệt : tên các hàm thay vì lưu info thông thường kiểu như ngày thanhgf năm sinh, tên tuổi

- Delegate là tên gọi chung có một nhóm hàm cùng styles cùng định dạng cùng dormat (type)
- Chơi với delegate là giúp cho 1 hàm bình thường có thêm một tên gọi khác nữa , là cách dặt tên nick name cho 1 hàm nào đó vì là tên gọi khác nên còn gọi là trỏ đến hàm , còn trỏ hàmm
- Delegate giống như câu chuyện luật sư = thân chủ là hàm góc ủy quyền , trao quyền , ủy nhiệm ,...
- 1 hàm sẽ có 2 cách gọi : Gọi hàm gốc để chạy , Gọi là nick name để chạy.

1. bước 1 : Khai báo Delegate - tạo data type chuyên đi sưu tầm lưu trữ trên hàm khai báo ngang cấp , ngang level với class khác, interface khác có thể xài thêm : internal , public , ko cần public , tùy.

- Cú pháp :
	Delegate Kiểu_Trả_về_của_hàm_ tên_Delegate_tên_chung__nhóm_hàm_data_type_Mới(tham số hàm)
- Vd: 
delegate void F()
delegate void F(int x)
internal delegate F(int x)
delegate int F(int x)
// thay int bằng kiểu data  type bạn cần , hàm có thể có nhiều hơn 1 tham số
> F kể từ nay về sau là 1 loại data type ngang cơ int, long, double , float, person,...
************>>>>>> nha sĩ khuyên dùng : nên dùng cái delegate có sẵn đc cung cấp bới microsoft bởi .net sdk thay vì tự tạo riêng những delegate như khai báo ở trên
Tức ;là bạn không cần tự may đo, mua đồ siêu thị , ko cần khai báo delegate vẫn sài delegate , xài đồ chuẩn của microsoft -> tương thích qua lại code trên mạng , với các code của developer khác trên thế giới , Đây là cách thiên hạ sài.

- Có 4 Data type ổi tiếng - 4 delegate trong .net - chuẩn hóa cách dặt tên cho các delegate
Action		Action<> 	Func<> 		Prediacte<>  
void F()	void F(???) 	??? F(???) 	bool F(?)      

2. bước 2 : Xài data type - khai báo biến dùng để trỏ hàm , lưu tên hàm , lưu hàm chủ thể vào luôn

luật sư = thân chủ ;// luật sư ông deal giùm tôi
Data type biến = value;
*Công thức: Data_type_Delegate_type_tên_nhóm_hàm  biến_trỏ_hàm  	= hàm_nào_đó_ở_đâu_đó;
						  nick_name_2nd_name 	= Hàm_nào_đó
vd:
F				f		  = 		hàm_nào_đó_ở_đâu_đó; // hàm có sẵn 
F				f		  = 		hàm_nào_đó_ở_đâu_đây;//
								anonymous function, lamda Expression
				biến,nick			thân chủ
				2nd name			
				luật sư
********>>>>>>> theo nha sĩ khuyên dùng, thì khai báo như sau:
Action		f 	= Hàm nào đó....
	Action<int>	f	= 
	Action<string, string>	= 
	Action<int> 		=
	Action<double, double>	=
	Predicate<double>
	Predicate<Student>	f	=
	Student			s1	= value nào đó , sinh viên nào đó củ thể: Bình, hồng

	int			yop	= vale nào đó , số nguyên cụ thể 3500000;

3. bước 3: Gán giá trị cho biến đã khaib áo ở bước 2 qua toán tử dấu = (+= -=)

- Tên biến = value
- Biến là tên gọi cho 1 value cụ thể nằm trong tập data type
- yob = 2003; yop là tên gọi cho value cụ thể 2003 thuộc tập data tên là INT, LONG,....

delegate_type biến 		= value là:
delegate_type biến 		= Tên hàm nào đó cụ thể ngoài kia (hàm gốc có sẵn - explicit)
				= Hàm nào đó ngay đây, ko thèm để tên hàm, bán tên rồi, chỉ còn lại code thoy (tên hàm đi kèm code tên_hàm() {...code...}) chính là ta đang sài anonymous function hoặc lambda Expression.

3.1. Gán giá trị cho biến nick name, biến luật sư = 1 hàm cụ thể nào đó có sẵn

	F f1 = TellHer; //Không có dùng ()
	int yob = 2003;

3.2. Gán giá trị cho biến nick name, biến luật sự = 1 hàm k có sẵn, tạo ngya lúc gán

	F f1 = delegate () {....}
	F f1 = () => {....}
		x => {...}
	   (x, y) => {.....}